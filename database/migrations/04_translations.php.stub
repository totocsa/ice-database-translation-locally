<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Support\Facades\DB;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        $driver = DB::getDriverName();
        $refreshTranslationvariants = "INSERT" . ($driver === 'mariadb' ? ' IGNORE' : '')
            . " INTO translationvariants(locales_id, translationoriginals_id, subtitle)\n"
            . "  SELECT t1.id, t2.id, ''\n"
            . "    FROM locales t1, translationoriginals t2\n"
            . "    WHERE t1.id IS NOT NULL AND t2.id IS NOT NULL AND t1.enabled AND NOT EXISTS(\n"
            . "      SELECT 1 FROM translationvariants\n"
            . "        WHERE locales_id=t1.id AND translationoriginals_id=t2.id);";

        if ($driver === 'pgsql') {
            DB::statement("CREATE FUNCTION public.translationvariants_insert_by_locales_and_translationoriginals() RETURNS trigger"
                . "    LANGUAGE plpgsql"
                . "    AS \$\$BEGIN\n"
                . "$refreshTranslationvariants\n\n"
                . "  RETURN NEW;\n"
                . "END\n"
                . "$$;");

            DB::statement("ALTER FUNCTION public.translationvariants_insert_by_locales_and_translationoriginals() OWNER TO zem;");

            foreach (['locales', 'translationoriginals'] as $tableName) {
                DB::statement("CREATE TRIGGER \"{$tableName}_after_insertORupdate_refreshTranslationvariants\""
                    . " AFTER INSERT OR UPDATE ON public.\"{$tableName}\" FOR EACH ROW EXECUTE FUNCTION"
                    . " public.translationvariants_insert_by_locales_and_translationoriginals();");
            }
        } elseif (in_array($driver, ['mysql', 'mariadb'])) {
            DB::statement("CREATE PROCEDURE `refreshTranslationvariants`()\n$refreshTranslationvariants");

            foreach (['locales', 'translationoriginals'] as $tableName) {
                DB::statement(
                    "CREATE TRIGGER `{$tableName}_after_insert_refreshTranslationvariants` AFTER INSERT ON"
                        . " `{$tableName}` FOR EACH ROW BEGIN\n"
                        . "  CALL refreshTranslationvariants();\n"
                        . "END"
                );

                DB::statement(
                    "CREATE TRIGGER `{$tableName}_after_update_refreshTranslationvariants` AFTER UPDATE ON"
                        . " `{$tableName}` FOR EACH ROW BEGIN\n"
                        . "  CALL refreshTranslationvariants();\n"
                        . "END"
                );
            }
        }
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        DB::statement("DROP TRIGGER IF EXISTS public.translationoriginals_after_insert_into_translationvariants");
        DB::statement("DROP TRIGGER IF EXISTS public.locales_after_insert_into_translationvariants");
        DB::statement("DROP FUNCTION IF EXISTS public.translationvariants_insert_by_locales_and_translationoriginals");
    }
};
